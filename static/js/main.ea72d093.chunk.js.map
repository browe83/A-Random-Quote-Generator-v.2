{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","quote","transform","fontSize","getRandomQuote","a","fetch","quoteObj","json","App","classes","useState","quoteData","setQuoteData","useEffect","then","author","console","log","Grid","container","direction","align","style","height","backgroundColor","item","xs","sm","display","alignItems","justifyContent","Card","className","root","id","CardContent","Typography","variant","color","gutterBottom","CardActions","IconButton","marginLeft","size","href","rel","target","marginRight","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2XAUMA,EAAYC,YAAW,CAC3BC,MAAO,CACLC,UAAW,iBACXC,SAAU,WAIRC,EAAc,uCAAG,4BAAAC,EAAA,sEACEC,MAAM,oDADR,cACfC,EADe,yBAEdA,EAASC,QAFK,2CAAH,qDAwDLC,MAnDf,WACE,IAAMC,EAAUX,IADH,EAEqBY,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,KAeb,OAXAC,qBAAU,WACRV,IACGW,MAAK,YAAwB,IAArBC,EAAoB,EAApBA,OAAQf,EAAY,EAAZA,MACfgB,QAAQC,IAAI,oBAAqBF,EAAQf,GACzCY,EAAa,CACXG,SACAf,eAGL,IAGD,eAACkB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,MAAM,SAASC,MAAO,CAACC,OAAQ,QAASC,gBAAiB,QAAzF,UACE,cAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,cAACT,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGL,MAAO,CAACM,QAAQ,OAAQC,WAAY,SAAUC,eAAgB,UAAxF,SACE,eAACC,EAAA,EAAD,CAAMC,UAAWvB,EAAQwB,KAAMC,GAAG,YAAlC,UACI,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYF,GAAG,OAAOG,QAAQ,KAA9B,UACE,cAAC,IAAD,CAAwBL,UAAWvB,EAAQT,QAD7C,IACuDW,EAAUX,SAEjE,eAACoC,EAAA,EAAD,CAAYF,GAAG,SAASI,MAAM,gBAAgBC,cAAY,EAA1D,eACK5B,EAAUI,aAGjB,eAACyB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYnB,MAAO,CAACoB,WAAY,QAASC,KAAK,QAA9C,SACE,mBAAGT,GAAG,cAAcU,KAAK,kCAAkCC,IAAI,aAAaC,OAAO,SAAnF,SACE,cAAC,IAAD,CAAaxB,MAAO,CAACgB,MAAO,iBAG9B,cAACG,EAAA,EAAD,CAAYP,GAAG,YAAYS,KAAK,QAAQrB,MAAO,CAACoB,WAAY,OAAQK,YAAa,QAASC,QAAS,WAAO7C,IACvGW,MAAK,YAAwB,IAArBC,EAAoB,EAApBA,OAAQf,EAAY,EAAZA,MACfgB,QAAQC,IAAI,oBAAqBF,EAAQf,GACzCY,EAAa,CACXG,SACAf,cALN,+BAWV,cAACkB,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAGC,GAAI,QCvDbsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ea72d093.chunk.js","sourcesContent":["import './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Card, IconButton } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport Typography from '@material-ui/core/Typography';\nimport FormatQuoteRoundedIcon from '@material-ui/icons/FormatQuoteRounded';\nimport React, { useEffect, useState } from 'react';\n\nconst useStyles = makeStyles({\n  quote: {\n    transform: \"rotate(180deg)\",\n    fontSize: \"100px\"\n  }\n});\n\nconst getRandomQuote = async () => {\n  const quoteObj = await fetch('http://quotes.stormconsultancy.co.uk/random.json');\n  return quoteObj.json();\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [quoteData, setQuoteData] = useState({});\n\n  useEffect(() => {\n    getRandomQuote()\n      .then(({ author, quote }) => {\n        console.log('author and quote:', author, quote);\n        setQuoteData({\n          author,\n          quote,\n        })\n      });\n  }, []);\n\n  return (\n    <Grid container direction=\"row\" align=\"center\" style={{height: \"100vh\", backgroundColor: \"teal\"}}>\n      <Grid item xs={1} sm={3}></Grid>\n      <Grid item xs={10} sm={6} style={{display:\"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n        <Card className={classes.root} id=\"quote-box\" >\n            <CardContent >\n              <Typography id=\"text\" variant=\"h5\" >\n                <FormatQuoteRoundedIcon className={classes.quote}/> {quoteData.quote} \n              </Typography>\n              <Typography id=\"author\" color=\"textSecondary\" gutterBottom>\n                - {quoteData.author}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <IconButton style={{marginLeft: \"20px\"}} size=\"small\">\n                <a id=\"tweet-quote\" href=\"http://twitter.com/intent/tweet\" rel=\"noreferrer\" target=\"_blank\">\n                  <TwitterIcon style={{color: \"#1DA1F2\"}} />\n                </a>\n              </IconButton>\n                <IconButton id=\"new-quote\" size=\"small\" style={{marginLeft: \"auto\", marginRight: \"20px\"}} onClick={() => {getRandomQuote()\n                  .then(({ author, quote }) => {\n                    console.log('author and quote:', author, quote);\n                    setQuoteData({\n                      author,\n                      quote,\n                    })\n                  })}}>New Quote</IconButton>\n            </CardActions>\n          </Card>\n      </Grid>\n      <Grid item xs={1} sm={3}></Grid>\n    </Grid> \n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}